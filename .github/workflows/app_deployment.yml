name: CD for Test And Prod
# PR on main will invoke build/push image to acr, and redeployment to aks test environment
# merged PR on main will invoke redployment to ask production environment
on:
  pull_request:
    branches: [ main ]
    paths:
        - 'app/**'
    
  push:
    branches: [ main ]
    paths:
        - 'app/**'


#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_ACCESS_KEY: "${{ secrets.ARM_ACCESS_KEY }}"

jobs:

  build-image:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t weather-redix-group06:${{ github.sha }} ./app
      
      - name: Login to Azure Container Registry
        run: |
          echo ${{ secrets.ARM_ACR_PASSWORD }} | docker login ${{ secrets.ARM_ACR_LOGIN_SERVER }} -u ${{ secrets.ARM_ACR_USERNAME }} --password-stdin

      - name: Tag Docker image
        run: docker tag weather-redix-group06:${{ github.sha }} ${{ secrets.ARM_ACR_LOGIN_SERVER }}/weather-redix-group06:${{ github.sha }}

      - name: Push Docker image to ACR
        run: docker push ${{ secrets.ARM_ACR_LOGIN_SERVER }}/weather-redix-group06:${{ github.sha }}

      - uses: gliech/create-github-secret-action@v1.4.10          
        with:
            name: LATEST_TAG
            value: ${{ github.sha }}
            pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}

  deploy-test:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-image]
    name: 'Deploy to TEST'      
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
  
        - name: Login to Azure Container Registry
          run: |
            echo ${{ secrets.ARM_ACR_PASSWORD }} | docker login ${{ secrets.ARM_ACR_LOGIN_SERVER }} -u ${{ secrets.ARM_ACR_USERNAME }} --password-stdin
    
        - name: Pull Docker image
          run: |
            echo -E "Secret content: ${{ secrets.LATEST_TAG }}"
            docker pull ${{ secrets.ARM_ACR_LOGIN_SERVER }}/weather-redix-group06:${{ secrets.LATEST_TAG }}
    
        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        # Use kubelogin to configure your kubeconfig for Azure auth
        - name: Set up kubelogin for non-interactive login
          uses: azure/use-kubelogin@v1
          with:
            kubelogin-version: 'v0.0.25'

        # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
        - name: Get K8s context
          uses: azure/aks-set-context@v3
          with:
            resource-group: 'cst8918-final-project-group-fp6'
            cluster-name: '8918-test-cluster-group06'
            admin: 'false'
            use-kubelogin: 'true'


        - name: Deploy kubectl
          run: |            
            kubectl apply -f app/k8s_deployment.yaml

      # az aks get-credentials --resource-group cst8918-final-project-group-fp6 --name 8918-test-cluster-group06 --overwrite-existing
      # kubectl get nodes
      # kubectl apply -f k8s_deployment.yaml

      # mkdir -p ~/.kube
      # echo "$KUBECONFIG" > ~/.kube/config     
        # - name: Verify Kubernetes Connection
        #   run: kubectl get nodes # or any other kubectl command you want to run

        # - name: Set Credentials of AKS Cluster
        #   run: |
        #     kubectl create secret generic weather-api-key --from-literal=WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}
        
        # - name: Deploy to AKS
        #   run: |
        #     kubectl apply -f app/k8s_deployment.yaml

          
  deploy-prod:    
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: 'Deploy to PROD'
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
  
        - name: Login to Azure Container Registry
          run: |
            echo ${{ secrets.ARM_ACR_PASSWORD }} | docker login ${{ secrets.ARM_ACR_LOGIN_SERVER }} -u ${{ secrets.ARM_ACR_USERNAME }} --password-stdin
    
        - name: Pull Docker image
          run: |
            docker pull ${{ secrets.ARM_ACR_LOGIN_SERVER }}/weather-redix-group06:${{ secrets.LATEST_TAG }}
    
        - name: Install Azure CLI
          run: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    
        - name: Install kubectl
          run: |
            sudo az aks install-cli
    
        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  
        - name: Configure kubectl
          env:
            KUBECONFIG: ${{ secrets.ARM_KUBE_CONFIG_PROD }}
          run: |
                mkdir -p ~/.kube
                echo "$KUBECONFIG" > ~/.kube/config
        
        - name: Verify Kubernetes Connection
          run: kubectl get nodes # or any other kubectl command you want to run

        - name: Set Credentials of AKS Cluster
          run: |
            kubectl create secret generic weather-api-key --from-literal=WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}
        
        - name: Deploy to AKS
          run: |
            kubectl apply -f app/k8s_deployment.yaml
      