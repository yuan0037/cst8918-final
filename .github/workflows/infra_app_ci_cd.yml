name: App Infrastructure
# Only merged PR on main branch with files changed under infra/tf-app folder
# will invoke terraform apply
on:
  push:
    branches: [ main ]
    paths:
      - 'infra/tf-app/**'
  pull_request:
    branches: [ main ]

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_ACCESS_KEY: "${{ secrets.ARM_ACCESS_KEY }}"

defaults:
  run:
    working-directory: ./infra/tf-app  
  
jobs:
  tflint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      name: Checkout source code

    - uses: actions/cache@v4
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v4
      name: Setup TFLint
      with:
        tflint_version: latest

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init
      env:
        # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      id: tflint
      run: tflint -f compact

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
        #this is needed since we are running terraform with read-only permissions
        ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
        tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - uses: actions/checkout@v4
      name: Checkout
    
    # Install the latest version of the Terraform CLI
    - uses: hashicorp/setup-terraform@v3
      name: Setup Terraform
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
    
        if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
        else 
            exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: infra/tf-app/tfplan
  
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
  
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
  
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
            echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

# This will only run if the terraform plan has changes, and when the PR is approved and merged to main.
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan]
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
    - name: Print Current Execution Folder
      run: pwd

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve ../../tfplan

    - name: Get Key
      id: get_key
      run: |       
        echo "::set-output name=acr_login_server::$(terraform output -raw acr_login_server)"
        echo "::set-output name=acr_username::$(terraform output -raw acr_username)"
        echo "::set-output name=acr_password::$(terraform output -raw acr_password)"
        echo "::set-output name=kube_config_test::$(terraform output -raw kube_config_test)"
        echo "::set-output name=kube_config_prod::$(terraform output -raw kube_config_prod)"
        echo "::set-output name=prod_redis_host::$(terraform output -raw prod_redis_host)"
        echo "::set-output name=prod_redis_primary_access_key::$(terraform output -raw prod_redis_primary_access_key)"
        echo "::set-output name=test_redis_host::$(terraform output -raw test_redis_host)"
        echo "::set-output name=test_redis_primary_access_key::$(terraform output -raw test_redis_primary_access_key)"

        
    - uses: gliech/create-github-secret-action@v1.4.10          
      with:
          name: ARM_ACR_LOGIN_SERVER
          value: ${{steps.get_key.outputs.acr_login_server}}
          pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}

    - uses: gliech/create-github-secret-action@v1.4.10          
      with:
        name: ARM_ACR_USERNAME
        value: ${{steps.get_key.outputs.acr_username}}
        pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}

    - uses: gliech/create-github-secret-action@v1.4.10          
      with:
        name: ARM_ACR_PASSWORD
        value: ${{steps.get_key.outputs.acr_password}}
        pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}

    - uses: gliech/create-github-secret-action@v1.4.10          
      with:
        name: ARM_KUBE_CONFIG_TEST
        value: ${{steps.get_key.outputs.kube_config_test}}
        pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}

    - uses: gliech/create-github-secret-action@v1.4.10          
      with:
        name: ARM_KUBE_CONFIG_PROD
        value: ${{steps.get_key.outputs.kube_config_prod}}
        pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}

    - uses: gliech/create-github-secret-action@v1.4.10          
      with:
        name: PROD_REDIS_HOST
        value: ${{steps.get_key.outputs.prod_redis_host}}
        pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}

    - uses: gliech/create-github-secret-action@v1.4.10          
      with:
        name: PROD_REDIS_ACCESS_KEY
        value: ${{steps.get_key.outputs.prod_redis_primary_access_key}}
        pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}

    - uses: gliech/create-github-secret-action@v1.4.10          
      with:
        name: TEST_REDIS_HOST
        value: ${{steps.get_key.outputs.test_redis_host}}
        pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}

    - uses: gliech/create-github-secret-action@v1.4.10          
      with:
        name: TEST_REDIS_ACCESS_KEY
        value: ${{steps.get_key.outputs.test_redis_primary_access_key}}
        pa_token: ${{secrets.USER_ACTION_TOKEN_WORKFLOW}}